<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Dev Vizier Tester</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        h1 {
            color: #667eea;
            text-align: center;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        input, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        textarea {
            height: 120px;
            resize: vertical;
        }
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 18px;
            cursor: pointer;
            width: 100%;
            margin: 10px 0;
            transition: transform 0.2s;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .btn-secondary {
            background: #6c757d;
        }
        .response {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 14px;
        }
        .success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #667eea;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ Game Dev Vizier Tester</h1>

        <div class="form-group">
            <label for="apiUrl">API Base URL:</label>
            <input type="text" id="apiUrl" placeholder="https://your-replit-url.replit.dev" value="">
        </div>

        <div class="form-group">
            <label for="businessName">Game Name:</label>
            <input type="text" id="businessName" placeholder="My Awesome Game" value="Test Game">
        </div>

        <div class="form-group">
            <label for="email">Your Email:</label>
            <input type="email" id="email" placeholder="your-email@example.com" value="">
        </div>

        <div class="form-group">
            <label for="gameData">Game Description:</label>
            <textarea id="gameData" placeholder="Describe your game idea here...">A platformer game about a ninja cat who saves the world from evil robots. The game features 20 challenging levels, epic boss fights, and various power-ups. Players can unlock new abilities and customize their ninja cat with different outfits and weapons.</textarea>
        </div>

        <button class="btn" onclick="testCustomAnalysis()">üéØ Test Custom Analysis</button>
        <button class="btn btn-secondary" onclick="testBuiltInEndpoint()">üß™ Test Built-in Test Endpoint</button>
        <button class="btn btn-secondary" onclick="testHealthCheck()">‚ù§Ô∏è Health Check</button>

        <div id="response"></div>
    </div>

    <script>
        function showLoading() {
            document.getElementById('response').innerHTML = '<div class="loading">üîÑ Processing...</div>';
        }

        function showResponse(data, isError = false) {
            const responseDiv = document.getElementById('response');
            const className = isError ? 'error' : 'success';
            responseDiv.innerHTML = `<div class="response ${className}">${JSON.stringify(data, null, 2)}</div>`;
        }

        function showInfo(message) {
            document.getElementById('response').innerHTML = `<div class="response info">${message}</div>`;
        }

        async function testCustomAnalysis() {
            const apiUrl = document.getElementById('apiUrl').value.trim();
            const businessName = document.getElementById('businessName').value.trim();
            const email = document.getElementById('email').value.trim();
            const gameData = document.getElementById('gameData').value.trim();

            if (!apiUrl) {
                showInfo('Please enter your Replit API URL first!');
                return;
            }

            if (!businessName || !email || !gameData) {
                showInfo('Please fill in all fields!');
                return;
            }

            showLoading();

            try {
                const response = await fetch(`${apiUrl}/api/analyze-game`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        business_name: businessName,
                        email: email,
                        game_data: gameData
                    })
                });

                const data = await response.json();
                showResponse(data, !response.ok);
            } catch (error) {
                showResponse({ error: error.message }, true);
            }
        }

        async function testBuiltInEndpoint() {
            const apiUrl = document.getElementById('apiUrl').value.trim();

            if (!apiUrl) {
                showInfo('Please enter your Replit API URL first!');
                return;
            }

            showLoading();

            try {
                const response = await fetch(`${apiUrl}/api/test`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                showResponse(data, !response.ok);
            } catch (error) {
                showResponse({ error: error.message }, true);
            }
        }

        async function testHealthCheck() {
            const apiUrl = document.getElementById('apiUrl').value.trim();

            if (!apiUrl) {
                showInfo('Please enter your Replit API URL first!');
                return;
            }

            showLoading();

            try {
                const response = await fetch(`${apiUrl}/api/health`);
                const data = await response.json();
                showResponse(data, !response.ok);
            } catch (error) {
                showResponse({ error: error.message }, true);
            }
        }

        // Auto-detect Replit URL if possible
        if (window.location.hostname.includes('replit')) {
            document.getElementById('apiUrl').value = window.location.origin;
        }
    </script>
</body>
</html>